{"version":3,"sources":["Components/HOC/withAuthRedirect.jsx","Components/Diologs/Dialogs.module.css","Components/Diologs/Message/Message.jsx","Components/Diologs/DialogItem/DialogItem.jsx","Components/Diologs/Dialogs.jsx","Components/Diologs/DialogsContainer.jsx"],"names":["mapStateToPropsForReDirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","module","exports","Message","className","s","dialog","message","DialogItem","path","id","active","companion","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","bodyStyle","btn","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messageElements","messages","m","dialogs_items","values","sendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"4LAGIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAQ7B,OADmCC,YAAQN,EAARM,EANT,SAACC,GACvB,OAAKA,EAAML,OACJ,cAACG,EAAD,eAAeE,IADI,cAAC,IAAD,CAAUC,GAAI,gB,oBCRhDC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,UAAY,6B,+HCM1MC,EAJC,SAACJ,GACb,OAAO,sBAAKK,UAAWC,IAAEC,OAAlB,cAA4BP,EAAMQ,Y,QCO9BC,EAPI,SAACT,GAChB,IAAIU,EAAO,YAAcV,EAAMW,GAC/B,OAAO,qBAAKN,UAAWC,IAAEC,OAAS,IAAMD,IAAEM,OAAnC,SACH,eAAC,IAAD,CAASP,UAAWC,IAAEO,UAAWZ,GAAIS,EAArC,UAA4CV,EAAMc,KAAlD,U,yCCgCFC,EAAYC,YAAiB,IAiB7BC,EAAsBC,YAAU,CAAEC,KAAM,wBAAlBD,EAfL,SAAClB,GACpB,OACA,uBAAMoB,SAAUpB,EAAMqB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAClBC,SAAU,CAACC,IAASX,GACpBD,KAAM,iBAAkBa,YAAa,yBAEzC,8BACI,wBAAQtB,UAAWuB,IAAUC,IAA7B,2BAQGC,EAhDC,SAAC9B,GAEb,IAAI+B,EACA/B,EAAMgC,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAiBH,GAAIwB,EAAExB,IAAZwB,EAAExB,OAEpEyB,EACApC,EAAMgC,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAS9B,QAAS8B,EAAE9B,SAAc8B,EAAE3B,OAM5E,OAAKX,EAAML,OAKP,sBAAKU,UAAWC,IAAE2B,QAAlB,UACI,qBAAK5B,UAAWC,IAAEiC,cAAlB,SACKR,IAEL,sBAAK1B,UAAWC,IAAE+B,SAAlB,UACI,8BAAMD,IACN,cAAEnB,EAAF,CAAsBG,SAfd,SAACoB,GACjBxC,EAAMyC,YAAYD,EAAOE,yBAIlB,cAAC,IAAD,CAAUzC,GAAI,YCHd0C,sBACX5C,aAfoB,SAACL,GACrB,MAAO,CACHsC,YAAatC,EAAMsC,gBAIA,SAACY,GACxB,MAAO,CACHH,YAAa,SAACC,GACdE,EAASC,YAAmBH,SAOhC7C,IAFW8C,CAGbb","file":"static/js/4.b96df2d0.chunk.js","sourcesContent":["import { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nlet mapStateToPropsForReDirect = (state) => ({\n    isAuth: state.auth.isAuth\n  });\n\nexport const withAuthRedirect = (Component) => {\n    const RedirectComponent = (props) => {\n        if (!props.isAuth) return <Redirect to={\"/login\"} />\n        return <Component {...props} />\n    } \n\n\n    let ConnectedAuthRedirectComponent=connect(mapStateToPropsForReDirect)(RedirectComponent);\n    return ConnectedAuthRedirectComponent;\n}\n\n\n  \n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3GY6O\",\"dialogs_items\":\"Dialogs_dialogs_items__p2kHp\",\"active\":\"Dialogs_active__1genx\",\"messages\":\"Dialogs_messages__1OeZK\",\"message\":\"Dialogs_message__1PmSu\",\"companion\":\"Dialogs_companion__rsRPj\"};","import React from 'react';\nimport s from './../Dialogs.module.css';\n\nconst Message = (props) => {\n    return <div className={s.dialog}> {props.message}</div>;\n}\n\nexport default Message;","import React from 'react';\nimport s from './../Dialogs.module.css';\nimport { NavLink } from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n    let path = \"/Dialogs/\" + props.id;\n    return <div className={s.dialog + ' ' + s.active}>\n        <NavLink className={s.companion} to={path}>{props.name} </NavLink>\n    </div>;\n}\n\nexport default DialogItem;","import React from 'react';\nimport s from './Dialogs.module.css';\nimport bodyStyle from './../../body.module.css'\nimport Message from './Message/Message';\nimport DialogItem from './DialogItem/DialogItem';\nimport { Redirect } from 'react-router-dom';\nimport { Field, reduxForm } from 'redux-form';\nimport { Textarea } from '../common/FormsControls/FormsControls';\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\n\nconst Dialogs = (props) => {\n\n    let dialogsElements =\n        props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\n\n    let messageElements =\n        props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} />);\n\n    let addNewMessage = (values) => {\n        props.sendMessage(values.newMessageBody);\n    }\n\n    if (!props.isAuth) { \n        return <Redirect to={\"/login\"} />\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogs_items}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messageElements}</div>\n                < AddMessageFormRedux onSubmit={addNewMessage}  />\n            </div>\n        </div>\n    )\n}\n\nconst maxLength50=maxLengthCreator(50);\n\nconst AddMessageForm = (props) => {\n    return (\n    <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field component={Textarea} \n            validate={[required,maxLength50]}\n            name={'newMessageBody'} placeholder={'enter your message'} />\n        </div>\n        <div>\n            <button className={bodyStyle.btn}> Send</button>\n        </div>\n    </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm);\n\nexport default Dialogs;\n","import { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withAuthRedirect } from '../HOC/withAuthRedirect';\nimport { sendMessageCreator} from '../Redux/dialogs-reducer';\nimport Dialogs from './Dialogs';\n\nconst mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newMessageBody) => {\n        dispatch(sendMessageCreator(newMessageBody));\n        }\n    }\n};\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);\n"],"sourceRoot":""}